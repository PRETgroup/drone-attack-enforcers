
//This file should be called F_attack_enforcer.h
//This is autogenerated code. Edit by hand at your peril!

#include <stdint.h>
#include <stdbool.h>
#include <assert.h>

//the dtimer_t type
typedef uint64_t dtimer_t;

//For each policy, we need an enum type for the state machine

enum attack_enforcer_policy_attack_1_states { 
	POLICY_STATE_attack_enforcer_attack_1_s0,
	POLICY_STATE_attack_enforcer_attack_1_violation 
};

enum attack_enforcer_policy_jam_time_states { 
	POLICY_STATE_attack_enforcer_jam_time_s0, 
	POLICY_STATE_attack_enforcer_jam_time_s1,
	POLICY_STATE_attack_enforcer_jam_time_violation 
};


//Inputs to the function attack_enforcer
typedef struct {
	
} inputs_attack_enforcer_t;

//Outputs from the function attack_enforcer
typedef struct {
	bool abort;
	bool run;
	bool new;
	bool end;
	
} outputs_attack_enforcer_t;

//enforcer state and vars:
typedef struct {
	enum attack_enforcer_policy_attack_1_states _policy_attack_1_state;
	//internal vars
	
	
	enum attack_enforcer_policy_jam_time_states _policy_jam_time_state;
	//internal vars
	dtimer_t t;
	
	
	
} enforcervars_attack_enforcer_t;


#define CONST_jam_time_start_jam 10
#define CONST_jam_time_end_jam 20


//This function is provided in "F_attack_enforcer.c"
//It sets up the variable structures to their initial values
void attack_enforcer_init_all_vars(enforcervars_attack_enforcer_t* me, inputs_attack_enforcer_t* inputs, outputs_attack_enforcer_t* outputs);

//This function is provided in "F_attack_enforcer.c"
//It will run the synthesised enforcer and call the controller function
void attack_enforcer_run_via_enforcer(enforcervars_attack_enforcer_t* me, inputs_attack_enforcer_t* inputs, outputs_attack_enforcer_t* outputs);

//This function is provided from the user
//It is the controller function
extern void attack_enforcer_run(inputs_attack_enforcer_t* inputs, outputs_attack_enforcer_t* outputs);

//enforcer functions


//This function is provided in "F_attack_enforcer.c"
//It will run the input enforcer for attack_enforcer's policy attack_1
void attack_enforcer_run_input_enforcer_attack_1(enforcervars_attack_enforcer_t* me, inputs_attack_enforcer_t* inputs);

//This function is provided in "F_attack_enforcer.c"
//It will run the input enforcer for attack_enforcer's policy attack_1
void attack_enforcer_run_output_enforcer_attack_1(enforcervars_attack_enforcer_t* me, inputs_attack_enforcer_t* inputs, outputs_attack_enforcer_t* outputs);

//This function is provided in "F_attack_enforcer.c"
//It will check the state of the enforcer monitor code
//It returns one of the following:
//0: currently true (safe)
//1: always true (safe)
//-1: currently false (unsafe)
//-2: always false (unsafe)
//It will need to do some reachability analysis to achieve this
int attack_enforcer_check_rv_status_attack_1(enforcervars_attack_enforcer_t* me);


//This function is provided in "F_attack_enforcer.c"
//It will run the input enforcer for attack_enforcer's policy jam_time
void attack_enforcer_run_input_enforcer_jam_time(enforcervars_attack_enforcer_t* me, inputs_attack_enforcer_t* inputs);

//This function is provided in "F_attack_enforcer.c"
//It will run the input enforcer for attack_enforcer's policy jam_time
void attack_enforcer_run_output_enforcer_jam_time(enforcervars_attack_enforcer_t* me, inputs_attack_enforcer_t* inputs, outputs_attack_enforcer_t* outputs);

//This function is provided in "F_attack_enforcer.c"
//It will check the state of the enforcer monitor code
//It returns one of the following:
//0: currently true (safe)
//1: always true (safe)
//-1: currently false (unsafe)
//-2: always false (unsafe)
//It will need to do some reachability analysis to achieve this
int attack_enforcer_check_rv_status_jam_time(enforcervars_attack_enforcer_t* me);


