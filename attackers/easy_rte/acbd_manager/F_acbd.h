
//This file should be called F_acbd.h
//This is autogenerated code. Edit by hand at your peril!

#include <stdint.h>
#include <stdbool.h>
#include <assert.h>

//the dtimer_t type
typedef uint64_t dtimer_t;

//For each policy, we need an enum type for the state machine

enum acbd_policy_ab_states { 
	POLICY_STATE_acbd_ab_s0,
	POLICY_STATE_acbd_ab_violation 
};

enum acbd_policy_cd_states { 
	POLICY_STATE_acbd_cd_s0,
	POLICY_STATE_acbd_cd_violation 
};


//Inputs to the function acbd
typedef struct {
	bool A;
	bool C;
	
} inputs_acbd_t;

//Outputs from the function acbd
typedef struct {
	bool B;
	bool D;
	
} outputs_acbd_t;

typedef struct {
	bool ab;
	bool cd;
	
} activations_acbd_t;


//enforcer state and vars:
typedef struct {
	enum acbd_policy_ab_states _policy_ab_state;
	//internal vars
	
	
	enum acbd_policy_cd_states _policy_cd_state;
	//internal vars
	
	
	
} enforcervars_acbd_t;



//This function is provided in "F_acbd.c"
//It sets up the variable structures to their initial values
void acbd_init_all_vars(enforcervars_acbd_t* me, inputs_acbd_t* inputs, outputs_acbd_t* outputs, activations_acbd_t* activations);

//This function is provided in "F_acbd.c"
//It will run the synthesised enforcer and call the controller function
void acbd_run_via_enforcer(enforcervars_acbd_t* me, inputs_acbd_t* inputs, outputs_acbd_t* outputs, activations_acbd_t* activations);

//This function is provided from the user
//It is the controller function
extern void acbd_run(inputs_acbd_t* inputs, outputs_acbd_t* outputs);

//enforcer functions


//This function is provided in "F_acbd.c"
//It will run the input enforcer for acbd's policy ab
void acbd_run_input_enforcer_ab(enforcervars_acbd_t* me, inputs_acbd_t* inputs);

//This function is provided in "F_acbd.c"
//It will run the input enforcer for acbd's policy ab
void acbd_run_output_enforcer_ab(enforcervars_acbd_t* me, inputs_acbd_t* inputs, outputs_acbd_t* outputs);

//This function is provided in "F_acbd.c"
//It will check the state of the enforcer monitor code
//It returns one of the following:
//0: currently true (safe)
//1: always true (safe)
//-1: currently false (unsafe)
//-2: always false (unsafe)
//It will need to do some reachability analysis to achieve this
int acbd_check_rv_status_ab(enforcervars_acbd_t* me);


//This function is provided in "F_acbd.c"
//It will run the input enforcer for acbd's policy cd
void acbd_run_input_enforcer_cd(enforcervars_acbd_t* me, inputs_acbd_t* inputs);

//This function is provided in "F_acbd.c"
//It will run the input enforcer for acbd's policy cd
void acbd_run_output_enforcer_cd(enforcervars_acbd_t* me, inputs_acbd_t* inputs, outputs_acbd_t* outputs);

//This function is provided in "F_acbd.c"
//It will check the state of the enforcer monitor code
//It returns one of the following:
//0: currently true (safe)
//1: always true (safe)
//-1: currently false (unsafe)
//-2: always false (unsafe)
//It will need to do some reachability analysis to achieve this
int acbd_check_rv_status_cd(enforcervars_acbd_t* me);


