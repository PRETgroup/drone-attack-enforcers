
//This file should be called F_acbd_manager.h
//This is autogenerated code. Edit by hand at your peril!

#include <stdint.h>
#include <stdbool.h>
#include <assert.h>

//the dtimer_t type
typedef uint64_t dtimer_t;

//For each policy, we need an enum type for the state machine

enum acbd_manager_policy_am_states { 
	POLICY_STATE_acbd_manager_am_s0, 
	POLICY_STATE_acbd_manager_am_s1,
	POLICY_STATE_acbd_manager_am_violation 
};


//Inputs to the function acbd_manager
typedef struct {
	
} inputs_acbd_manager_t;

//Outputs from the function acbd_manager
typedef struct {
	bool activate_ab;
	bool activate_cd;
	
} outputs_acbd_manager_t;

//enforcer state and vars:
typedef struct {
	enum acbd_manager_policy_am_states _policy_am_state;
	//internal vars
	dtimer_t v;
	
	
	
} enforcervars_acbd_manager_t;




//This function is provided in "F_acbd_manager.c"
//It sets up the variable structures to their initial values
void acbd_manager_init_all_vars(enforcervars_acbd_manager_t* me, inputs_acbd_manager_t* inputs, outputs_acbd_manager_t* outputs);

//This function is provided in "F_acbd_manager.c"
//It will run the synthesised enforcer and call the controller function
void acbd_manager_run_via_enforcer(enforcervars_acbd_manager_t* me, inputs_acbd_manager_t* inputs, outputs_acbd_manager_t* outputs);

//This function is provided from the user
//It is the controller function
extern void acbd_manager_run(inputs_acbd_manager_t* inputs, outputs_acbd_manager_t* outputs);

//enforcer functions


//This function is provided in "F_acbd_manager.c"
//It will run the input enforcer for acbd_manager's policy am
void acbd_manager_run_input_enforcer_am(enforcervars_acbd_manager_t* me, inputs_acbd_manager_t* inputs);

//This function is provided in "F_acbd_manager.c"
//It will run the input enforcer for acbd_manager's policy am
void acbd_manager_run_output_enforcer_am(enforcervars_acbd_manager_t* me, inputs_acbd_manager_t* inputs, outputs_acbd_manager_t* outputs);

//This function is provided in "F_acbd_manager.c"
//It will check the state of the enforcer monitor code
//It returns one of the following:
//0: currently true (safe)
//1: always true (safe)
//-1: currently false (unsafe)
//-2: always false (unsafe)
//It will need to do some reachability analysis to achieve this
int acbd_manager_check_rv_status_am(enforcervars_acbd_manager_t* me);


